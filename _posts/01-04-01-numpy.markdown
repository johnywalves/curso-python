---
layout: post
category: modules
modulo: 4. Análise de Dados com Python
title: Biblioteca para Coleção de Dados (numpy)
description: NumPy (Numerical Python) é uma biblioteca fundamental para computação científica em Python. Ela fornece suporte para a manipulação eficiente de arrays multidimensionais e funções matemáticas de alto desempenho para realizar operações em dados numéricos
order: 4.1
---

## Instalação do pacote

Instalar o pacote `numpy` no pelo pip

```bash
pip install numpy
```

## Importação de biblioteca

Importação de uma biblioteca com um apelido

```python
import numpy as np
```

## Criação de Lista e Array

Iniciando direto

```python
import numpy as np

lista = [1, 2, 3, 4, 5, 6, 7, 8]

print("tipo lista", type(lista))
print("lista", lista, "\n")

array = np.array(lista)

print("array", array)
print("tipo array", type(array))
```

Criando um array por uma lista

```python
import numpy as np

array_lista = np.array([6, 7, 8, 9, 10])

print("array_lista", array_lista)
```

Criando um array por uma lista

```python
import numpy as np

lista = [6, 7, 8, 9, 10, 2, 4]

array_lista = np.array(lista)

print("max", array_lista.max())
```

## Manipulação de coleção de dados

Ler dados de arrays

```python
import numpy as np

lista_primos = [2, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37]

primos = np.array(lista_primos)

print('Tudo', primos)
print('Primeiro', primos[0])
print('Quarto', primos[3])
print('Oitavo', primos[7])
print('Primeiro, Segundo, Terceiro', primos[0:2])
print('Segundo, Terceiro, Quarto, Quinto', primos[1:4])
print('Último', primos[-1])
print('Penúltimo', primos[-2])
```

Alteração de dados de array e matrizes

```python
import numpy as np

lista_primos = [2, 3, 5, 7, 9, 11]

primos = np.array(lista_primos)

primos[2] = 9

print(primos)
```

Visualizar dados da array por condição, exemplos para os todos maiores de 3

```python
import numpy as np

lista_primos = [2, 3, 5, 7, 9, 11]

primos = np.array(lista_primos)

filtro = primos > 3
print('filtro', filtro, '\n')

maiores_tres = primos[filtro]
print('maiores_tres', maiores_tres)
```

## Criação de array multi-dimensional

Criação de matriz

```python
import numpy as np

array_multi = np.array([
        [1, 3, 5, 7], 
        [2, 4, 6, 8]
    ])

print('matriz\n', array_multi, '\n')
print('formato\n', array_multi.shape)
```

Remodelar uma matriz

```python
import numpy as np

array_multi = np.array([
        [1, 3, 5, 7], 
        [2, 4, 6, 8]
    ])
reshape = array_multi.reshape(4, 2)

print('original\n', array_multi, '\n')
print('remodelado\n', reshape)
```

Criação de uma matriz com numeração em sequência

```python
import numpy as np

array_create = np.arange(9)
print('original\n', array_create, '\n')

array_create.resize((3, 3))
print('remodelado\n', array_create, '\n')
```

## Matemática com arrays

Conta com arrays

```python
import numpy as np

a = np.array([2, 4, 6])
b = np.array([6, 10, 14])

print('soma', a + b)
print('subtração', b - a)
print('soma elementos', a.sum())
print('media elementos', a.mean())
```

Elementos únicos

```python
import numpy as np

lista = np.array([1, 1, 2, 5, 5])

lista_unica =  np.unique(lista)

print('únicos', lista_unica)
```

Filtragem completa

```python
import numpy as np

lista_primos = [2, 3, 5, 7, 9, 11, 13, 23, 29, 31, 37]

primos = np.array(lista_primos)

print('maiores 5\n', primos[np.where(primos > 7)], '\n')
print('menores 30\n', primos[np.where(primos < 30)], '\n')
print('entre 5 e 30\n', primos[np.where((primos > 7) & (primos < 30))], '\n')
print('além 5 e 30\n', primos[np.where((primos < 7) | (primos > 30))], '\n')
```

Remover zeros

```python
import numpy as np

lista = np.array([2, 3, 0, 13, 0, 19, 0])

print(lista[lista.nonzero()])
```

## Matemática com array multi-dimensional

Cálculos simples com matrizes

```python
import numpy as np

lista = np.array([1, 2, 3, 4])
print("original\n", lista, "\n")

lista.resize((2, 2))
print("modelado\n", lista, "\n")

print("max em colunas\n", lista.max(axis=0), "\n")
print("max em linhas\n", lista.max(axis=1), "\n")

print("média em colunas\n", lista.mean(axis=0), "\n")
print("média em linhas\n", lista.mean(axis=1), "\n")

print("min em colunas\n", lista.min(axis=0), "\n")
print("min em linhas\n", lista.min(axis=1), "\n")

print("soma em colunas\n", lista.sum(axis=0), "\n")
print("soma em linhas\n", lista.sum(axis=1), "\n")
```

## Manipulação com array multi-dimensional

Visualizar **terceira** linha e **terceira** coluna

```python
import numpy as np

primos = np.array([2, 3, 5, 7, 9, 11, 13, 17, 19])
primos.resize((3, 3))

print('matriz\n', primos, '\n')
print('elemento\n', primos[2, 2], '\n')
```

**quarta** linha

```python
import numpy as np

primos = np.array([2, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31])
primos.resize((4, 3))

print('matriz', primos)
print('linha', primos[3, ])
```

**quarta** linha e **segunda** a **terceira** coluna

```python
import numpy as np

primos = np.array([2, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31])
primos.resize((4, 3))

print('matriz', primos)
print('elemento', primos[3, 1:2])
```

Alterar matriz em lote

```python
import numpy as np

primos = np.array([2, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31])
primos.resize((4, 3))

primos[primos >= 20] = 90

print(primos)
```

## Conversão de tipos

Conversão da listagem inteira para um tipo

```python
import numpy as np

primos = np.array([2, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37])
primos_float = np.array([2, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37], float)
primos_str = np.array([2, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37], str)

print('int', primos)
print('float', primos_float)
print('str', primos_str)
```

## Quero mais

O NumPy é uma biblioteca essencial para qualquer pessoa que trabalhe com computação científica, análise de dados ou processamento de números em Python, para saber mais você pode consultar a [documentação do NumPy](https://numpy.org/doc/stable/reference/index.html#reference)
